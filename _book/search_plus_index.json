{"./":{"url":"./","title":"项目介绍","keywords":"","body":"MySensors是一个开源的硬件和软件社区，专注于自己动手、家庭自动化和物联网。 我们在这里是为了帮助那些想要创造出基于Arduino，ESP 8266，Raspberry PI，nrf 24l01+和RFM 69等组件的原始和负担得起的传感器和执行器的人。听起来很复杂吗？别担心，我们会解释一切的。 我们提供易于遵循的构建说明，准备使用代码示例和适应性开放源码硬件设计。所有这些都是在MySensors的软件库上运行的，该软件已经与市场上20多个领先的家庭自动化控制器进行了对战测试。 因此，加入，有乐趣，创造你自己的家庭连接体验！ 致谢！所有为mysensor付出的开发者和贡献者！ Copyright © mysens.cn 2018 all right reserved，powered by Gitbook该文档修订时间： 2019-11-19 15:21:22 "},"about/why.html":{"url":"about/why.html","title":"新手必读","keywords":"","body":"title: 选择的理由 date: 2019-05-01T12:54:30.859Z tags: [mysensor-中文站] categories: [mysensor] 1.这是一个开源的低功耗硬件方案 2.它可完全脱离WIFI，节点网关通信采用类似zigbee广播数据类型，无视节点状态，存在即响应。 3.各个节点均可以被中继和中继，动态自动中继，支持多频段网关，多类型模块 4.轻松接入，无需复杂配置，仅配置网关即可接入节点 5.低成本，是理想的电池传感器DIY开源方案。 Copyright © mysens.cn 2018 all right reserved，powered by Gitbook该文档修订时间： 2019-05-08 23:17:36 "},"about/imx.html":{"url":"about/imx.html","title":"交流平台","keywords":"","body":" 暂无其它 Copyright © mysens.cn 2018 all right reserved，powered by Gitbook该文档修订时间： 2019-11-19 18:17:42 "},"gateway/info.html":{"url":"gateway/info.html","title":"网关部分","keywords":"","body":"　　　       Mysensor网关充当控制器和无线电网络之间的传话器。它将无线电消息转换为可由控制器理解的协议。您可以使用与传感器相同的组件自己构建网关。我们提供了这里描述的各种选择。 在构建网关之前，您应该检查控制器支持哪个选项。 Sensebender网关这是无麻烦(几乎)即插即用选项，以使网关运行。 该项目由samd芯片完成，焊接件较多，目前未进行制作 SerialGateway-网关使用一个可用的USB端口直接连接到您的控制器。由于SerialGateway依赖于可用的USB端口，因此需要将网关定位到控制器附近。 该项目依赖设备比如各类派有SPI接口即可 EthernetGateway-该网关连接到以太网网络，您的控制器也使用该网络提供了比SerialGateway更灵活的放置位置，允许您将网关安装在无线电网络的中心位置。 以太网设备有更高的可靠性，支持TCP和UDP MQTTGateway-该网关还连接到以太网网络，并公开一个MQTT代理，该代理可以用于提供诸如OpenHAB这样的MQTT支持的控制器。 MQTT协议，简易通俗 @(重点讲解以wifi接入的网关设备，目前较为容易获得) 接入类型 以目前的官方资料，主要支持RJ45,RS485,WIFI,USB,GPIO RJ45以太网接入      主要设备W5100,W5500以太网SPI接口，需要配合MCU，官方推荐配置使用samd21 频率48MHZ，也可以使用atmega328P 16MHZ,但处理速度均远远低于esp8266 70MHZ, ESP32 80-120MHZ,最大的优势即无视WIFI干扰，稳定性五星 RS485接入      目前使用并不多，主要为联动设备，多数是从mysensor协议转换到485，少数转到mysensor，软件和支持开源自动化方面比较弱。 WIFI接入      主要设备ESP8266,ESP32，两款均可以被良好支持，频率高，反应快，目前也是推荐使用之一，高达120MHZ，足够使用多点TCP接入，同时接入NODE-RED，Mysensor控制器，Homeassistant仍然可以很快速的处理数据!稳定性一般，受wifi影响，可能会导致网关与自动化系统传输问题 USB      主要来自官方Sensebender，受限于设备，不作过多介绍，类似于GPIO类型，需要安装驱动，未有测试，受制于网关设备端。 GPIO      主要设备树梅派，橙子派等，直接使用linux驱动，理论上性能好，内部控制器直接使用TTL完成，也可使用TCP中转，是理想的all in one解决方案，即NODE-RED MYSENSOR控制器 网关一体，无视外界，内部自成一体。 协议类型 支持MQTT,TCP/UDP,串行，接入HA和node均无任何压力，其它平台domoticz openhba等均可以直接使用。 MQTT      协议适合度广，目前测试HA偶会无响应，需要重启HA，可能是HA插件造成! TCP/UDP      推荐使用协议，节点通信好，支持限制接入数， SERIAL      由于串口受主机影响，无法直接多点输出，合适于内部一体完成，集成网关和Node-red，是比较理想的内部一体设备，暂时不谈论，有兴趣的可以一试！ 自动化平台 　　 Mysensor网关目前已经支持大部分主流平台，包括HA，Domoticz,HomeGenie,Pidome,Vera,OPENHAB，Node-Red等，部分支持控制器功能！设备添加仅需要添加主机配置，设备自动由节点提交presentation自动添加。 　　 Copyright © mysens.cn 2018 all right reserved，powered by Gitbook该文档修订时间： 2019-11-19 17:02:13 "},"gateway/esp32gw.html":{"url":"gateway/esp32gw.html","title":"ESP32/NRF24网关","keywords":"","body":"title: ESP32GW date: 2019-04-18T2:54:30.859Z tags: [mysensor-中文站] categories: [mysensor]         本项目采用乐鑫ESP32-S/ESP32模块，采用 AS01-ML01DP5 NRF24L01+PA无线收发模块，网关是核心数据节点，请确保元件的正品性，采用非nordic产品的无线模块，会选成高丢包率，组网中，无法分配ID！国产SI24R1不建议作网关使用，上下兼容性较差。 PCB视图     PCB正面视图     PCB背面视图 PCB 电源芯片为UZ1085L-3.3V 最大3A输出，刷机和桥接SERIAL-TTL采用拨码式         PCB ESP32启动电流超过500mah，大部分电脑USB设备无法提供足够的电池完成配网操作，设备会重复重启，LED不断闪烁，请连接5V 1A以上电源         对于ESP32-S模块，可以使用外接天线，但可能对nrf24造成干扰，通常来说建议放置无线信号较好的地区使用！         PCB背面URX,UTX，为telnet程序IO对接，由于IO直对tx rx,测试中发现出现部分无法刷机的现况，故改为短接点，刷机前请确保两点未短接。 刷机-OTA         刷机请从固件区fimware.mysensor.pub下载对应ESP32GW版本的固件，固件区分MQTT和TCP。升级完成后网关WEB有显示 TTL刷机         请使用ESPHOMEFLASHER刷机，https://github.com/esphome/esphome-flasher/releases 由于固件不包含分区和BOOT APP等信息，其它刷机软件刷完之后无法启动         按图中拨码，将1-2码拨OFF，3码拨ON 即为短接0进入刷机模式         接入TTL，选择对应文件，点击FLASH-ESP，软件检测到ESP32板后自动进入清空和刷机，出现Done! Flashing is complete！完成刷机。将拨码还原到【 上-上-下 】 OTA升级         请使用Chrome、firefox浏览器 打开http://网关IP 进入后出现界面,使用admin/admin登入，选择上传完成即可！ 配网操作 TCP节点   TCP节点由于库的原因，无法采用WIFIMANANGER配网，目前使用官方SDK中的SMARTCONFIG 需要手机下载ESPTOUCH完成配网操作，IOS在苹果APPSTORE搜ESPTOUCH，安卓请在群里下载文件..,     当前手机接入WIFI将会被ESP32作为SSID连接，输入WIFI密码后，选择Multicast模式，完成配网后，弹出界面，网关3个灯将常亮，表示正常完成网关的配网并开始接收2.4G数据 !!! warning \"注意\" 1.WIFI接入点请尽量使用单频2.4G，不要使用混合5G类型 2.部分由于网络环境AP软路由固件因素，导致无法返回配网IP，请视察网关LED灯是否全部亮起 MQTT节点     升级操作或者TTL刷机操作后，网关启动后自动生成ESP32GW 热点，请使用手机等设备连接，自动弹出配网界面，输入WIFI信息和MQTT信息，保存后生效，针对不能自动弹出的，请打开192.168.4.1完成以上操作，完成后，网关WEB有对应的蓝色界面 !!! warning \"注意\" 当前MQTT版本为mysensor-2.3.2-beta内核，可能存在无法与HA正常通信，但不会影响MQTT协议消息。 日志调试     由于一些特殊环境，可能你会需要调试网关，分为TTL网关调试、NC日志、Telnet日志 TTL调试 USB口旁边4P-2.54依次分别为VCC-GND-RXD-TXD，VCC需要5V 1A以上电流 将拨码1 2调回OFF 即三个拨码为下下下，接入电脑TTL，打开 串口工具，上电后将输出信息 Telnet     标准Telnet服务，支持输入输出，使用PUTTY工具或者其它工具均可，这里建议使用webzsh Putty连接     使用PUTTY工具请参考下方设置，在终端选选项勾上增加LR和增加CR，以取得换行效果，否则显示将乱行 WEBZSH     WEBZSH安装请参考下节./gateway/webzsh/，它支持后台数据运行记录， 有利于Debug节点相关信息: 3D外壳     3D打印文件： Copyright © mysens.cn 2018 all right reserved，powered by Gitbook该文档修订时间： 2019-08-09 17:05:13 "},"nrf24m/info.html":{"url":"nrf24m/info.html","title":"NRF24M模块","keywords":"","body":"title: NRF24M模块 date: 2019-04-18T2:54:30.859Z tags: [mysensor-中文站] categories: [mysensor]     NRF24M模块是一款半SMT产品，采用atmega328p-mmhr系列。尺寸仅19.5*14.6mm，输出anlnog接口A2-A5,数字接口D2-D7，全部io均可以被使用，A4,A5为I2C接口，D2，D3为物理中继接口。搭配国产中科微SI24R1芯片乐鑫模块。该模块经测试稳定性不错，丢包率较其它国产打磨模块低，并且兼容性比较好。 PCB示图 PCB实物图 目前最新版本为1.1版本，更新了刷机脚，全部在正面即可完成刷机 v1.1版 v1.0版 LAYOUT图 PCB脚位1.1版本刷机将更容易，1.0版本需要从背面取脚，正面取RST v1.1版 v1.0版 !!! note \"说明\" 1.模块SMD和接口均为1.27间距。 2.模块自带LDO-662K压降芯片【1.1版本默认取消】，功耗实测大概在7ua左右，电压范围最大可达6.2V左右，如果项目中你不需要，那么清你拆下这个SOT23-3的黑色3脚芯片，并短接上图中VCC3V蓝色区域。 3.刷机时，刷机夹请取电正方向V-G-RST-背面夹住SI24R1模块，取其SCK-MOSI-MISO即可。 模块参数     模块植入性强，尺寸小，未来众多Mysensor项目将会采用此模块，目前已经完成门磁，花草，温湿度气压光线，人体感应等具体请参看本节项目。元件LED为台产亿光，容阻为三星及国巨。 功耗实测     模块集合662K，关闭WDT休眠 状态下消耗12ua-14ua左右，无休眠状态下功耗14ma左右。远远低于esp系列。     针对电池系列，去掉662K，由于atmega芯片时间久(开源支持也是相对完善的)，WDT目前不是需要消耗4UA左右，针对非定时唤醒的项目 ，待机仅消耗4-5ua，年待机消耗不足50mah，针对定时唤醒设备，待机7-9ua，年消耗不足80mah。     发送数据时，模块将会启动SI24R1，瞬间电流高在14ma，按官方宣称，节点单次数据发送消耗大概150ms左右，加上程序，大概消耗300ms，该部分没有示波器无法实测。     经过简单测试，对比某米zigbee产品，其待机低于1ua，发射时功耗相当，但由于zigbee是新产品，运行频率和速度远远超过atmega328p 8Mhz，故其无论待机还是发射消耗都是有优势的，特别是待机上，发射消耗不会差出很多水平。不过我们可以使用电池容量来补短板。 整合特征     模块D2脚集成10M拉高电阻，合适二进制传感器，是制作门磁，触发，雨滴，无线按键的快捷选择，直接外接设备和电池，即可快速完成。     模块D3、D5、D6为物理PWM脚，非esp系列的模拟。合适制作调光电路。      A5脚为SCL,A4为sda，直接可接入I2C设备使用。      A2-A5均可以当ADC脚使用，支持5V电压测量。 Copyright © mysens.cn 2018 all right reserved，powered by Gitbook该文档修订时间： 2019-08-09 17:06:52 "},"nrf24m/flash.html":{"url":"nrf24m/flash.html","title":"固件写入","keywords":"","body":"title: 固件写入 date: 2019-04-18T2:54:30.859Z tags: [mysensor-中文站] categories: [mysensor] !!! warning \"警告\" 务必要清醒的是，MCU熔丝设置是不可逆的，轻则需要靠其它设备引线救砖，重则直接报废。从2019年8月后，所有正常信息节点均可被OTA升级操作，OTA部分请参考OTA章节单元，针对自己制作PCB的，请按下图使用工具刷机，     硬件上，你需要准备USB-TTL,USB-ASP,SOP16刷机夹具,杜邦线 USB-ASP USBASP设备芯片多样，建议购买atmega系列usbasp,注意USBASP默认可能是5V供电，务必条线到3.3v，否则烧坏无线模块，导致功耗奇高，无法休眠 !!! note \"提醒\" 淘宝系USB设备多为特殊产品。默认win10驱动导致arduino无法识别，部分需要安装libusbK驱动。链接https://pan.baidu.com/s/1dENivhJ?qq-pf-to=pcqq.c2c SOP16夹具      此刷机夹由于并非设计给夹板，夹具张口偏大，针对PCB可能出现夹不紧的状况， 这里提供一个改装方法。 拆出栓 将红红部分使用刀具削掉一部分，削完后如下图 将弹簧使用工具拉一下，然后装回去，如图，完成组装，此时便可以夹1.0mm PCB板了 avrdudess     avrdudess刷机软件打开后，请参考下图设置完成，确保第一项都严格核对后再操作。 Fuses_Lock bits如果读出来与图中不一致，务必更正与图中一致 使用前，夹具夹好后，软件Detect两次，确保读出328P信息后刷入 刷机过程中，如果遇到校验ERROR，则说明你的线接触不良或者没夹好 不可强制中断操作，任何时间也不可以。 如果使用标准文件网关无法发现节点，请刷入({++with-boot++})后缀名文件 请参考下方GIF图片 Copyright © mysens.cn 2018 all right reserved，powered by Gitbook该文档修订时间： 2019-08-09 17:06:33 "},"nrf24m/binary.html":{"url":"nrf24m/binary.html","title":"门磁传感","keywords":"","body":"title: NRF24-DOOR date: 2019-04-18T2:54:30.859Z tags: [mysensor-中文站] categories: [mysensor] 平均待机功耗4-5ua左右，发射瞬间功耗14ma左右，年待机40mah左右。 CR2032(210mah)电池，理论待机3年以上。理论正常频率(每天开启6-10次左右）可使用超过1年以上。 !!! warning \"BUG\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;长加安装方式，由于PCB生产厚度行业难达标称1.6(实际1.51更低),导致拆电池会导致SI24R1部分元件摩擦，替换2.0PCB成本过高，考虑到门磁耗电实际情况，故暂时无更改计划，建议做完板后，使用胶带贴一下SI24R1芯片元件，参考下图。 模块示图     模块DIY难度非常低，到手焊接即可，电池座为铁扣形式 PCB示图 19.6*21MM净板尺寸 实物图 正面 背面 模块BOM     仅需干簧管({++最大14mm++})、NRF24M模块。 !!! Note \"关于干簧管\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;干簧管长度选择上，越短触发磁力越小，越灵敏，越长灵敏越差，但并非越灵敏越好，一般来说，门磁建议使用14mm干簧管(间隙较小才触发)，针对特殊环境，你可以使用更小的尺寸，比如7MM，灵敏和触发距离范围均大一倍以上。 代码固件     本PCB项目提供开源代码和固件，使用者可以快速使用arduino编译上传或者使用progisp上传hex固件。 源代码 /** The MySensors Arduino library handles the wireless radio link and protocol between your home built sensors/actuators and HA controller of choice. The sensors forms a self healing radio network with optional repeaters. Each repeater and gateway builds a routing tables in EEPROM which keeps track of the network topology allowing messages to be routed to nodes. Created by Henrik Ekblad Copyright (C) 2013-2015 Sensnology AB Full contributor list: https://github.com/mysensors/Arduino/graphs/contributors Documentation: http://www.mysensors.org Support Forum: http://forum.mysensors.org This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation. ******************************* DESCRIPTION Simple binary switch example Connect button or door/window reed switch between digitial I/O pin 2 (BUTTON_PIN below) and GND. http://www.mysensors.org/build/binary code reedit by huex // */ // Enable debug prints to serial monitor #define MY_DEBUG // Enable and select radio type attached #define MY_RADIO_RF24 //#define MY_DEBUG_VERBOSE_RF24 #define MY_RF24_PA_LEVEL RF24_PA_LOW #define MY_RF24_DATARATE RF24_250KBPS //RF24_1MBPS RF24_2MBPS //#define MY_RF24_CHANNEL 105 //#define MY_BAUD_RATE 115200 #define MY_BAUD_RATE 9600 //#define MY_SIGNING_ATSHA204 //#define MY_SIGNING_ATSHA204_PIN 17 //#define MY_SIGNING_REQUEST_SIGNATURES /*Node ID & NAME*/ #define MY_TRANSPORT_UPLINK_CHECK_DISABLED #define MY_PARENT_NODE_IS_STATIC #define MY_PARENT_NODE_ID 0 char SKETCH_NAME[] = \"Door Sensor\"; char SKETCH_VERSION[] = \"1.0\"; /*Time Period */ //#define SLEEP_TIME 21600*1000 // 12h #define SLEEP_TIME 0 // no wdt #define BATT_REPORT_CYCLE 60 // 1 hour float lastVcc = 3.30 ; //Batteryv int lastdoor = -1; int batteryPcnt ; /*Sensor & Battery Pin */ #define REED_PIN 2 // sensor pin #define LED_PIN 8 #define BATTERY_SENSE_PIN A1 // battery #define VMIN 1.8 #define VMAX 3.3 /*Child ID*/ #define CHILD_ID_DOOR 1 #define CHILD_ID_VBAT 254 //BATTERY //#include #include /*Message Instance */ MyMessage msgdoor(CHILD_ID_DOOR, V_TRIPPED); MyMessage msgVbat(CHILD_ID_VBAT, V_VOLTAGE); void blinkity(uint8_t pulses, uint8_t repetitions) { for (int x = 0; x VMIN ) && ( batteryV = 0.1)) { sendBatteryLevel(batteryPcnt); send(msgVbat.set(batteryV, 2)); lastVcc = batteryV; } } HEX固件 {==NRF24DOOR.HEX==} 3D外壳 长48 宽23.实物打印效果： stl文件下载： {==NRF24DOOR-STL.RAR==} Copyright © mysens.cn 2018 all right reserved，powered by Gitbook该文档修订时间： 2019-08-09 16:05:17 "},"nrf24m/i2cs.html":{"url":"nrf24m/i2cs.html","title":"环境传感","keywords":"","body":"title: NRF24-SENSORS date: 2019-05-09T13:54:30.859Z tags: [mysensor-中文站] categories: [mysensor] 平均待机功耗7-8ua左右，发射瞬间功耗14ma左右，年待机80mah左右。 CR2450(550mah)/CR2477(950mah)电池。电池使用时长与上报频率和上报差值有关。 CR2450电池550mah，以一年计算，合400mah可用于发射检测，400mha/14ma=28.5H/365=0.078277(H)*3600s=281s/300ms(单次发送预计最大时长,参考国外)=936次，即1天发射936次。假如每分钟检测一次，上报一个值，那么天天需要消耗1440次。即CR2450电池仅可使用0.6年。CR2477电池(1.7倍CR2450)预计时长增加1.5倍以上。 !!! Note \"建议\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;考虑到传感器的实际情况，一般建议温度差值0.1，湿度0.3(即芯片的误差范围)。单一光线传感器，由于工作只有白天，故CR2450足够，采用BME280,气压值需要精准度高的情况下，电池续航会相对更低. 设计示图     模块采用挖空方式下沉贴NRF24M模块。由于NRF24M模块下沉后在1.68左右。考虑到部分情况，电池采用固定式接触片和非固定式，目前采用双PCB加厚到2.0mm。 PCB示图 设计直径32MM。双侧减0.8mm. 6个0603贴片，黑色为电阻，棕色为电容。 实物图 正面图片 正面图片 BOM制造     模块PCB基于NRF24M模块，PCB必须做1.0 叠双层使用。 Gerber     仅供极客使用，不得商业使用 Gerber BOM表 序列 标记 元件名 封装 数量 备注 1 NRF24M nrf24m nrf24m 1 2 R1、R2、R3 10KΩ (10K) ±5% 0603 3 3 C2、C3、C1 100nf-6.3v 0603 3 x7r最佳 4 Si7020-A20 Si7020-A20 6-DFN（3x3） 1 5 OPT3001 OPT3001 USON-6 1 6 BME280 BME280 LGA-8 1     BME280/si7021(htu21)/opt3001;按需使用。 代码固件 0.1温度差异、0.3湿度差异化上报，检测频率 每分钟     NRF24-SENSOR.HEX 属性定义     通过对网关的消息日志， 236343905 TSF:MSG:PINGED,ID=18,HP=2 236343915 TSF:MSG:SEND,0-0-7-18,s=255,c=3,t=25,pt=1,l=1,sg=0,ft=0,st=OK:1 236345906 TSF:MSG:READ,70-7-0,s=255,c=3,t=15,pt=6,l=2,sg=0:0100 236345914 TSF:MSG:SEND,0-0-7-70,s=255,c=3,t=15,pt=6,l=2,sg=0,ft=0,st=OK:0100 236345971 TSF:MSG:READ,70-7-0,s=255,c=0,t=17,pt=0,l=5,sg=0:2.3.1 236345991 TSF:MSG:READ,70-7-0,s=255,c=3,t=6,pt=1,l=1,sg=0:18 236346212 GWT:RFC:C=1,MSG=70;255;3;0;6;M 236346217 TSF:MSG:SEND,0-0-7-70,s=255,c=3,t=6,pt=0,l=1,sg=0,ft=0,st=OK:M 236346274 TSF:MSG:READ,70-7-0,s=255,c=3,t=11,pt=0,l=13,sg=0:NRF24 Sensors 236346295 TSF:MSG:READ,70-7-0,s=255,c=3,t=12,pt=0,l=3,sg=0:1.4 236346419 TSF:MSG:READ,70-7-0,s=2,c=0,t=16,pt=0,l=3,sg=0:Lux 236346470 TSF:MSG:READ,70-7-0,s=254,c=0,t=30,pt=0,l=3,sg=0:Vcc 236346521 TSF:MSG:READ,70-7-0,s=23,c=0,t=24,pt=0,l=5,sg=0:Empyt 236346541 TSF:MSG:READ,70-7-0,s=255,c=3,t=26,pt=1,l=1,sg=0:2 236346553 TSF:MSG:SEND,0-0-7-70,s=255,c=3,t=27,pt=1,l=1,sg=0,ft=0,st=OK:1 236347964 TSF:MSG:READ,70-7-0,s=2,c=1,t=37,pt=4,l=4,sg=0:497 236347984 TSF:MSG:READ,70-7-0,s=255,c=3,t=0,pt=1,l=1,sg=0:100 236348005 TSF:MSG:READ,70-7-0,s=254,c=1,t=38,pt=7,l=5,sg=0:3.44 我们可以得知，固件支持Empyt定义，该定义引用VAR1值，方便重新分发节点ID，具体使用请参OTA 章节 3D-STL 打印无需支撑，精度不够的请对应调节     STL下载 Copyright © mysens.cn 2018 all right reserved，powered by Gitbook该文档修订时间： 2019-08-09 17:06:45 "},"nrf24m/pir.html":{"url":"nrf24m/pir.html","title":"人体感应","keywords":"","body":"title: NRF24-MOTION date: 2019-04-18T2:54:30.859Z tags: [mysensor-中文站] categories: [mysensor]     pir模块采用NRF24M核心，电池为CR2477(标称950mah),森霸am312大窗口,由于diy市场难以找到符合低电压,外围电路简单的PIR芯片，故使用TI升压芯片，am312最低要求电压为2.7, 本次PCB ti升压芯片(0.7-5.5)稳定输出2.8V，功耗仅4ua,最优转换效率高达95%。模块全年功耗预计250mah左右,剩余电量可计算出触发次数。 模块图示     模块顶部挖空立式安装nrf24m核心板,正面PIR 透镜正中安装，光线传感器在透镜内部，作参考是完全足够的。电池座为塑座。 实物图 PCB电路图 PCB视图 0603共计16个贴片元件、一个sot23-6元件。 !!! note \"说明\" 1.透镜为大镜，角度120，标称距离8-10米，另外经测试曲面镜效果也不错。 2.PIR上检测上报时差硬件为3s，时长调节需要控制器设置后，硬件重启生效。 2.温度模块为SI7021，默认固件不会定时发送，仅PIR触发后上报数据。即代码结构WDT为关闭状态。 BOM制造     无件各类较多，容阻请购买大品牌。电感必须为绕线内阻200mΩ上下. 序列 标记 元件名 封装 数量 备注 1 NRF24M nrf24m nrf24m 1 2 R3、R1 1KΩ (1K) ±5% 0603 2 3 C5、C6、C2 10uf-16v 0603 3 x5r以上 5 C7、C1、C4、C3 100nf-16v 0603 4 6 D1 0603-LED 0603 1 7 L1 10uh-10% SMD331.2 1 8 R2 20KΩ (20K) ±5% 0603 1 9 R5 200KΩ (200K) ±5% 0603 1 10 R6、R4 1MΩ (1M) ±5% 0603 2 11 R7 470KΩ (470K) ±5% 0603 1 12 Si7020-A20 Si7020-A20 6-DFN（3x3） 1 13 BH1750 BH1750 WSOF-6I 1 14 tlv TLV61220 sot23-6 1 固件下载     PIR芯片3S触发机制,针对3S触发、频率较高，耗电相对较多。故代码部分添加了软时间，触发后，MCU会sleep指定时间，无论中途是重新触发还是由WDT唤醒，均不会提交两次ON，无触发后，会进入OFF,现默认30S !!! Note \"建议\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;超时设置请依据自身的需求，针对高频率触发区域，建议设置30秒-2分钟，以减少电耗和无效数据量，针对低频率你可以设置更低，但必须知道的是，当你设置10S超时，意味着对比小米等人体 不仅数据量大，而且消耗较高，综合将会是10倍以上的消耗，电池续航时间将大大缩短到1/10 以下的使用时间.     NRF24-MOTION.HEX 属性定义         PIR模块目前最新版本引用了{++Empyt:Time:Blink:Lux++}4个自定义值，数据格式A:B:C:D ，请依照自身的定义值修改： Empyt：清除当前节点的配置ID及其它信息，用作更换节点ID，值为1或者0，默认为0 Time：定义PIR检测超时时间，设置30即触发后，30秒以后才会重复检测状态，默认为30 Blink：PIR-led选项，当值为1时，触发人体，PIR会闪绿色灯，值默认为0禁用此功能 Lux：生成自定义值VAR2，输出布尔值1或者0，默认为0禁用此功能。参考下节说明 {==        定义60S，启用LED 那么则数据应该为0:60:1:0 ,依次类推，关于设置请参OTA ==} 3D-STL 此处感谢小F、三文大神付出，文件均需要支撑打印     STL下载 Copyright © mysens.cn 2018 all right reserved，powered by Gitbook该文档修订时间： 2019-08-09 16:35:19 "},"nrf24m/flower.html":{"url":"nrf24m/flower.html","title":"花花草草","keywords":"","body":"title: 花花草草 date: 2019-05-09T13:54:30.859Z tags: [mysensor-中文站] categories: [mysensor] 平均待机功耗7-8ua左右，发射瞬间功耗14ma左右，年待机80mah左右。 CR2032(210mah)电池，平均每天检测1-2次，理论寿命1年左右     PCB门磁板预留A2-A3脚，交替使用检测量 !!! warning \"BUG\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;长加安装方式，由于PCB生产厚度行业难达标称1.6(实际1.51更低),导致拆电池会导致SI24R1部分元件摩擦，替换2.0PCB成本过高，考虑到门磁耗电实际情况，故暂时无更改计划，建议做完板后，使用胶带贴一下SI24R1芯片元件，参考下图。 模块示图     模块DIY难度非常低，到手焊接即可，电池座为铁扣形式，建议使用304材质，1mm，太粗会损坏PCB，消耗电量也会更多。 PCB示图 19.6*21MM净板尺寸 实物图 加长安装方式 加高安装方式 此加高安装方式建议购买1.27错位贴母针即可。     等待补图中..... 模块BOM     仅需1MM-304圆棒、NRF24M模块。 代码固件     本PCB项目提供开源代码和固件，使用者可以快速使用arduino编译上传或者使用progisp上传hex固件。 源代码 #define MY_DEBUG // Mode Radio / Enable and select radio type attached #define MY_RADIO_RF24 #define MY_RF24_PA_LEVEL RF24_PA_LOW //MINI LOW HIGH MAX //#define MY_RF24_DATARATE RF24_250KBPS #define MY_BAUD_RATE 9600 //115200 19200 9600 =8MHZ 4800 =1MHZ //#define MY_TRANSPORT_WAIT_READY_MS (30000) /*Node ID & NAME*/ //#define MY_NODE_ID 61 //Fallback NodeId #define MY_TRANSPORT_UPLINK_CHECK_DISABLED #define MY_PARENT_NODE_IS_STATIC #define MY_PARENT_NODE_ID 0 char SKETCH_NAME[] = \"Flower Sensor\"; char SKETCH_VERSION[] = \"1.0\"; /*OTA Featuer*/ #define MY_OTA_FIRMWARE_FEATURE /*Child ID*/ #define CHILD_ID_HUM 4 //Humidity Sensor #define CHILD_ID_MOISTURE 5 //Humidity Sensor #define CHILD_ID_VBAT 254 //BATTERY /*Time Period */ unsigned long SLEEP_TIME = 12 * 3600000; //检测时间间隔 unsigned long SHORT_TIME = 2000; static int32_t battreportCount = -3; static int32_t voltage; static int32_t batteryPcnt; static int32_t lastVcc; const int SENSOR_ANALOG_PINS[] = {A2, A3}; #define BATTERY_SENSE_PIN A6// battery sensor #define THRESHOLD 1.1 // Only make a new reading with reverse polarity if the change is larger than 10% (default 1.1) #define MOISTURE_THRESHOLD 1.01 // Delta needing for sending moisture to the controler (default 1.01) #define BATTERY_FULL 3300 // when full AAA (default 3300) #define BATTERY_ZERO 2340 #define LED_PIN 8 int oldbatteryPcnt = -1; byte direction = 0; int oldMoistureLevel = -1; //Define functions #define round(x) ((x)>=0?(long)((x)+0.5):(long)((x)-0.5)) #define N_ELEMENTS(array) (sizeof(array)/sizeof((array)[0])) #include #include MyMessage msgm(CHILD_ID_MOISTURE, V_HUM); MyMessage msgv(CHILD_ID_VBAT, V_VOLTAGE); void presentation() { wait(50); sendSketchInfo(SKETCH_NAME, SKETCH_VERSION); wait(50); present(CHILD_ID_MOISTURE, S_HUM, \"Moistrue\"); //BH1750 wait(50); present(CHILD_ID_VBAT, S_MULTIMETER, \"Vcc\"); //Battery } void setup() { pinMode(LED_PIN, OUTPUT); analogReference(INTERNAL); for (int i = 0; i (oldMoistureLevel * THRESHOLD) || moistureLevel (oldMoistureLevel * MOISTURE_THRESHOLD) || moistureLevel BATTERY_FULL) { batteryPcnt = 100; } else if (batteryV HEX固件     暂不提供，项目为测试 3D外壳     暂未完成，等待大神留名中..... Copyright © mysens.cn 2018 all right reserved，powered by Gitbook该文档修订时间： 2019-05-09 21:10:21 "},"nrf24m/button.html":{"url":"nrf24m/button.html","title":"按键遥控","keywords":"","body":"title: 遥控按键 date: 2019-08-01T13:54:30.859Z tags: [mysensor-中文站] categories: [mysensor] 平均待机功耗7-8ua左右，发射瞬间功耗14ma左右，年待机80mah左右。 CR2032(210mah)电池，平均每天检测1-2次，理论寿命1年左右 源代码 //#define MY_DEBUG /*Raido*/ #define MY_RADIO_RF24 // Enable and select radio type attached #define MY_RF24_PA_LEVEL RF24_PA_LOW //MINI LOW HIGH MAX //#define MY_RF24_DATARATE RF24_250KBPS //#define MY_REPEATER_FEATURE #define MY_BAUD_RATE 9600 //115200 19200 9600 =8MHZ 4800 =1MHZ /*Node ID & NAME*/ //#define MY_NODE_ID 9 //Fallback NodeId //#define MY_TRANSPORT_UPLINK_CHECK_DISABLED //#define MY_PARENT_NODE_IS_STATIC //only for clone si24r1 //#define MY_PARENT_NODE_ID 0 //only for clone si24r1 char SKETCH_NAME[] = \"Button Sensor\"; char SKETCH_VERSION[] = \"1.0\"; #include #include /*Authentication*/ /*Child ID*/ #define CHILD_ID_BINARY 1 #define CHILD_ID_VBAT 254 //BATTERY /*BATTERY*/ #define BATTERY_SENSE_PIN A1 // battery sensor #define LED_PIN 8 #define BUTTON_PIN 2 //button pin #define VMIN 2.2 #define VMAX 3.44 /*Time Period */ #define SLEEP_TIME 60000 // 1 min static int16_t lastVcc = 3.44; //Batteryv int lastvalue = -1; int batteryPcnt ; int mode; int node; int child; int empyt; /* IMport Modlues */ /*Message Instance */ MyMessage msgsw(CHILD_ID_BINARY, V_SCENE_ON); //对标RELAYS继电器属性，不可更改 MyMessage msgvcc(CHILD_ID_VBAT, V_VOLTAGE); MyMessage msgvar1(S_CUSTOM, V_VAR1); // Empty ID void(* resetFunc) (void) = 0; void before() { pinMode(BUTTON_PIN, INPUT); analogReference(INTERNAL); mode = loadState(2); node = loadState(6); child = loadState(9); } void setup() { if (transportCheckUplink() == false) { blinkity(4, 2); } if (isTransportReady() == true) { blinkity(2, 1); } /*每次重启后请求值*/ request(S_CUSTOM, V_VAR1); wait(1000); /* 检测值的准确性 */ if ( mode > 1 ) { empyt = 0; mode = 30; node = 0; child = 0; String str = String(empyt) + \":\" + String(mode) + \":\" + String(node) + \":\" + String(child); const char* value = str.c_str(); send(msgvar1.set(value)); } if (empyt == 1) { for (uint16_t i = 0; i 1 || mode > 1 ) { int empyt = 0; int mode = 0 ; int node = 0; int child = 0; } else { saveState(2, mode); saveState(6, node); saveState(9, child); } String str = String(empyt) + \":\" + String(mode) + \":\" + String(node) + \":\" + String(child); const char* value = str.c_str(); send(msgvar1.set(value)); } } void blinkity(uint8_t pulses, uint8_t repetitions) { for (int x = 0; x VMIN ) && ( batteryV = 0.2)) { sendBatteryLevel(batteryPcnt); send(msgvcc.set(batteryV, 2)); lastVcc = batteryV; } } HEX固件     暂不提供，项目为测试 3D外壳     暂未完成，等待大神留名中..... Copyright © mysens.cn 2018 all right reserved，powered by Gitbook该文档修订时间： 2019-08-01 18:14:38 "},"nrf24m/relays.html":{"url":"nrf24m/relays.html","title":"开关模块","keywords":"","body":"title: NRF24-Relays date: 2019-08-07T2:54:30.859Z tags: [mysensor-中文站] categories: [mysensor]     开关模块使用328P 芯片处理器、无线使用SI24R1、具有自动组网中继、弹性设计、“离线可控”等优点，是一款非常适合改装的开关模块 继电器品牌为HF49FD-005-1H11T，特性材质，防粘连效果好，应用负载150W-LED不粘 继电器支持模块在线切换，点控或者翻转只需要指令操作即可完成 内置P2P程序，支持遥控直接点到点操作，无需经过外部自动化平台 支持状态灯输出，自动翻转，适合物理开关 PCB制造 !!! Warning \"版权提示\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;继电器制造文件仅供个人极客使用，严禁个人或者公司商业运作! PCB设计 {==继电器支持5V 3V外接输出，使用跳焊并线，S1 S2 S3分别接开关1 开关2 开关3 ，L1 L2 L3分别接对应的LED灯，状态反转==} PCB文件     Gerber下载 BOM表     BOM表对应上传到GITHUB制造文件里，请直接参考购买 固件下载     固件默认单双三开统一固件，采用属性定义的办法定义继电器数量，并存入EEPROM，仅设置一次即可。     Hex下载 {++下载后请参考NRF24M-固件写入，写入带BOOT 文件名的固件++} !!! note \"提示\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;继电器完成固件后，请定义自定义属性，默认为单开，翻转模式 属性定义     固件自定义项引用VAR1，数据格式\"Relay:Mode\" Relay:继电器数量，默认为1，按实际数量填写，超过3无效 Mode:继电器切换模式，支持点动值1和翻转值0，默认0     {++ 举例: 3开点动模式 3:1 ++} Copyright © mysens.cn 2018 all right reserved，powered by Gitbook该文档修订时间： 2019-08-09 17:07:05 "},"hass/info.html":{"url":"hass/info.html","title":"接入平台","keywords":"","body":"title: Homeassistant date: 2019-05-07T2:54:30.859Z tags: [mysensor-中文站] categories: [mysensor]     Homeassistant插件由Mysensor官方维护，插件已经收录到homeassistant插件库.只需要添配置网关文件即可，项目目前支持以下类型： 节点支持 !!! note \"说明\" 1.设备由节点presentation信息提供，HA检测到presentation信息后，自动添加生成 2.Ha节点采用TCP，会间隔对网关请求，以判断节点的可操作性 3.由于无线设备的非双向性，目前ha针对设备无状态可查询，主观依靠网关提供。 配置文件 mysensors: gateways: # - device: '/dev/ttyUSB0' #串行节点(TCP/MQTT/串行 三选一) # persistence_file: 'path/mysensors.json' # baud_rate: 38400 # nodes: # 201: # name: 'lux' # 200: # name: 'node' # - device: '/dev/ttyACM0' #串行节点(TCP/MQTT/串行 三选一) # persistence_file: 'path/mysensors2.json' # baud_rate: 115200 - device: '10.0.0.244' #TCP节点(TCP/MQTT/串行 三选一) persistence_file: '/config/mysensors.json' tcp_port: 5003 nodes: #节点名称(非必须） 21: name: '儿童房' 18: name: '书房' # - device: mqtt #MQTT节点(TCP/MQTT/串行 三选一) # persistence_file: '/config/mysensors.json' # topic_in_prefix: 'mygateway-out' # topic_out_prefix: 'mygateway-in' optimistic: false persistence: true retain: true version: '2.0' 配置后,HA会在配置根目录生成mysensor.json，此文件是homeassistant保存的节点信息文件 节点编辑 　　　子设备的添加是需要由节点提供presentation后才会添加的，所以当配置完后，设备并不会自动由网关添加，你需要重置子节点后，ha才会去收集presentation信息并生成对应的json格式 { \"201\": { \"sensor_id\": 201, \"children\": { \"2\": { \"id\": 2, \"type\": 16, \"description\": \"Lux\", \"values\": { \"37\": \"6056\" } }, \"254\": { \"id\": 254, \"type\": 30, \"description\": \"Vcc\", \"values\": { \"38\": \"3.44\" } } }, \"type\": 17, \"sketch_name\": \"South Lux Sensor\", \"sketch_version\": \"1.0\", \"battery_level\": 99, \"protocol_version\": \"2.3.1\", \"heartbeat\": 0 }, \"0\": { \"sensor_id\": 0, \"children\": {}, \"type\": 18, \"sketch_name\": \"Mysensors Gateway\", \"sketch_version\": \"1.0\", \"battery_level\": 0, \"protocol_version\": \"2.3.1\", \"heartbeat\": 104039792 } } !!! note \"注意\" 1.如果HA已经存在节点，节点硬件重启后仍然会提交presentation，默认HA会update节点信息，但HA可能会在log里报错,并不会影响设备。 2.请保留0节点，此为网关设备的配置信息 !!! warning \"警告\" 修改此文件时，先停用homeassistant,修改完成后，请务必检查json格式，如果格式错误保存后，ha无法读取会造成清空所有的配置文件重新生成，，切记修改删除部分节点后，一要备份并且复制格式到json在线格式化工具中检查一次确保没有问题后再启动ha Copyright © mysens.cn 2018 all right reserved，powered by Gitbook该文档修订时间： 2019-09-10 10:54:47 "},"node/info.html":{"url":"node/info.html","title":"Node-red","keywords":"","body":"title: Node-red date: 2019-05-08T2:54:30.859Z tags: [mysensor-中文站] categories: [mysensor]     Node-red是理想的自动化处理节点，由于网关采用TCP或者MQTT协议数据，故无需添加任何专用插件，特别是使用TCP节点网关，仅需要对数据简单处理即可完成自动化。 简单示例 [{\"id\":\"2c277daf.ef48d2\",\"type\":\"function\",\"z\":\"73da2156.fb1da\",\"name\":\"tcp-set\",\"func\":\"var splitTopic= msg.topic.split(\\\"\\\\/\\\");\\n\\n// splitTopic[0] is the MySensors/ preamble. #1 is NODE_ID and on up. \\nmsg.payload = splitTopic[1] + \\\";\\\" + splitTopic[2] + \\\";\\\" + splitTopic[3] + \\\";\\\" + splitTopic[4] + \\\";\\\" + splitTopic[5] + \\\";\\\" + msg.payload ;\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"x\":764,\"y\":538,\"wires\":[[\"dad3c4c0.ead3a8\",\"400b9254.fa90bc\"]]},{\"id\":\"dad3c4c0.ead3a8\",\"type\":\"function\",\"z\":\"73da2156.fb1da\",\"name\":\"\",\"func\":\"msg._session = context.global.tcpsess;\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"x\":931,\"y\":536,\"wires\":[[\"e368a715.2472e8\",\"af803fdd.1e5ab\"]],\"outputLabels\":[\"msg.nodeId\"]},{\"id\":\"400b9254.fa90bc\",\"type\":\"debug\",\"z\":\"73da2156.fb1da\",\"name\":\"\",\"active\":true,\"tosidebar\":true,\"console\":true,\"tostatus\":true,\"complete\":\"payload\",\"x\":819,\"y\":442,\"wires\":[]},{\"id\":\"e368a715.2472e8\",\"type\":\"debug\",\"z\":\"73da2156.fb1da\",\"name\":\"\",\"active\":true,\"tosidebar\":true,\"console\":true,\"tostatus\":true,\"complete\":\"payload\",\"x\":1156,\"y\":597,\"wires\":[]},{\"id\":\"af803fdd.1e5ab\",\"type\":\"tcp out\",\"z\":\"73da2156.fb1da\",\"host\":\"\",\"port\":\"\",\"beserver\":\"reply\",\"base64\":false,\"end\":false,\"name\":\"\",\"x\":1178,\"y\":528,\"wires\":[]}]     由于目前DIY仅限制于非可控设备，可控设备后续添加后补充。 ALL IN ONE     Node-red是理想的all in one自动化处理中心，目前理想是使用派设备，运行Node-red，使用串行数据中心或者rj45,整合到一个模块中，即可完成家庭智能网关集合，无视外网和WIFI，所有操作系统内部完成，并且不受HA或者homekit升级BUG影响。 Copyright © mysens.cn 2018 all right reserved，powered by Gitbook该文档修订时间： 2019-05-08 10:48:11 "},"ota/mycontrol.html":{"url":"ota/mycontrol.html","title":"控制器OTA","keywords":"","body":"title: Mycontrol date: 2018-09-01T12:54:30.859Z tags: [mysensor-中文站] categories: [mysensor] 　　　       网关控制器是针对网关消息处理的核心，负责分配ID，非休眠设备、智能休眠设备的OTA软件，官方有提供windows的调试控制器，另外部分智能平台支持网关功能，目前homeassistant未引入全部功能，其它软件不作详细介绍，本文针对官方推荐的MYCONTROLLER介绍 安装程序 　　　  项目为java程序，推荐使用docker安装，对于高手，建议自行安装，项目地址为：https://www.mycontroller.org/#/downloads 　　　  针对新手或者不折腾的你可以使用以下docker镜像， 　　　  N1 arm架构的请使用以下命令启动： docker pull huex/mctll:armbian docker run --network=host -d \\ --restart=always \\ --name mysensor\\ huex/mctll:armbian 　　　  x64架构的请使用以下命令启动： docker pull huex/mctll:latest docker run --network=host -d \\ --restart=always \\ --name mysensor\\ huex/mctll:latest 自定义配置文件在镜像内部/mctll/conf/mycontroller.properties,可拷贝自定义映射目录。建议配置mysql存储！ web端口1043 基础使用 　　　  安装完成后，使用admin/admin登入，界面如下， 添加网关 　　　  资源列表，网关部分，添加网关--ADD， 注意添加网关为Mysensors，非mycontrroller,类型TCP。在线检查频率为检测传感器存活的操作时间，一般来说，传感器不具备被动检测，仅限于非sleep节点，建议时间设置较长，10小时或者1天，但针对少量活动的节点，节点状态仍然会是不可用。 节点列表 　　　  节点为每一个node的节点，节点资源目前未能提前分配（需要指定无线地址？）均由子节点启动时提交presentation信息，控制器自动对应生成节点相关消息，此列可对节点控制OTA，重启和刷新presentation信息，功能仅限于非sleep节点，一般用于有供电的继电器和节点进行操作。 　　　  节点可以编辑，通常编辑其版本，固件，以方便针对性升级，比如开关节点，你可以有针对性的升级其版本。 传感器列表 node-chlid项目,节点下的对应子项，通常由presentation提供，比如单一SI7021温湿度节点，子项目为温度，湿度，电压，三个传感器项目 针对可控制的子项，比如继电器它可以 提供操作处，对于非可控的，提供历史记录。 　　　 传感器均可以编辑，主要提供给mysx控制器分区和一些简单的自动化操作归类使用。 　　 　 Copyright © mysens.cn 2018 all right reserved，powered by Gitbook该文档修订时间： 2019-08-09 20:09:06 "},"ota/info.html":{"url":"ota/info.html","title":"OTA介绍","keywords":"","body":"title: ota date: 2019-04-18T2:54:30.859Z tags: [mysensor-中文站] categories: [mysensor]     Mysensor OTA 依赖网关控制器，并且节点必须支持对应的BOOT升级操作，328P目前均可以支持并且对应升级。在升级之前我们必须先了解一下数据传输的结构和OTA原理以及相关可能带来的问题。 从上图了解到，数据最终汇集到控制器，控制器形式是可以多样的，按照官方API即可完成匹配，目前HA并不支持完整控制器功能，主推使用控制器为MYCONTROLLER.ORG 开放源码控制器,支持所有mysensor的全部功能 BOOT     Bootloader是个绕不开的话题，要想可以OTA，硬件上必须支持MYSX的核心bootloader及API操作，虽然mysx支持了类似STM32F103,SAND21 ATMEGA328P，大体上兼容了支持arduino的兼容atmega硬件，但实质上，Bootlaoder ota这一部分目前仅仅atmega328P系列是完美的. {==这就决定了，如果你想要取得OTA，必须针对你的MCU重新刷写bootloader支持，针对328PU-TH，你需要用工具写FUSE，写入with_boot名称文件，并且设置正确的保险丝==} MCTLL 　　　       网关控制器是针对网关消息处理的核心，节点设备的OTA数据分发,控制器理论上并非是必须设备，但是由于固件非硬性ID固化，目前所有节点初使化依赖控制器分配管理ID并形成网络，分配完成后节点将信息写入EEPROM不再重复请求。 Copyright © mysens.cn 2018 all right reserved，powered by Gitbook该文档修订时间： 2019-08-09 20:08:57 "},"ota/otamsg.html":{"url":"ota/otamsg.html","title":"OTA升级","keywords":"","body":"title: OTA-MSG date: 2018-09-01T12:54:30.859Z tags: [mysensor-中文站] categories: [mysensor] 　　　       支持OTA升级的设备，目前分为电池传感器-NRF24M固件和长在线节点 电池传感器由于采用外部中断或者定时狗，设备进入休眠后，直接关闭接收数 在线式节点支持中继，并且可以完美随时变量操作 下文中均将电池传感器视为离线节点，另外由于BOOTLOADER原因，部分固件需要重新USBASP刷机后方可离线OTA 上传固件 　　　       进入控制器-实用程序-固件 依次添加固件类型，版本 并上传固件 编辑节点 　　　       节点启动后，会对应在资源，节点中生成节点通告的内容。编辑节点，选择对应的节点固件版本 OTA上传 　　　       完成上面步骤后，由于目标分在线节点和离线节点，针对在线节点直接我们可以直接操作上传固件，然后重启节点，节点就自动完成上传发起更新任务。 在线节点 　　　       发起上传操作后，网关发送固件值版本，节点接收并对比，重启后开始上传，如下图操作： GWT:RFC:C=1,MSG=27;255;4;0;1;11000D0000052D2A TSF:MSG:SEND,0-0-27-27,s=255,c=4,t=1,pt=6,l=8,sg=0,ft=0,st=0:11000D0000052D2A 离线节点 　　　       跟在线节点一样发起上传操作后，网关发送固件值版本，但节点离线无法实时接收，反馈如下 GWT:RFC:C=1,MSG=27;255;4;0;1;11000D0000052D2A !TSF:MSG:SEND,0-0-27-27,s=255,c=4,t=1,pt=6,l=8,sg=0,ft=0,st=NACK:11000D0000052D2A 　　　       我们可以拨下电池，等待10-30秒的时间【部分节点有220UF电容，需要等待或者短路一下正负极】，重新上电后，自动进入OTA流程 Copyright © mysens.cn 2018 all right reserved，powered by Gitbook该文档修订时间： 2019-08-09 20:09:22 "},"ota/varmsg.html":{"url":"ota/varmsg.html","title":"属性定义","keywords":"","body":"title: VAR-MSG date: 2018-09-01T12:54:30.859Z tags: [mysensor-中文站] categories: [mysensor] 　　　       属性变量在官方中应用的地方并不多，作为开源软件，官方更多考虑的是直译，但是由于适用性，大部分固件均采用了属性定义来取得一些个性化的变量 工作原理 　　　       在线节点无线一直是工作状态，可以实时接收到任何来着外部的数据指令，针对离线节点，则需要由MCU内部在初使化的时候与控制器请求匹配数据完成变量操作，并完成一致性对比提交 针对继电器节点，分发后，数据由节点MCU完成保存变量，但由于部分变量是在循环主程序之外的定义，比如继电器数量，这个是初使化中引用，那么则需要重启生效，针对模式的切换其变量是在循环主程序，故无需重启直接可生效 针对传感器节点，重启后由MCU请求数据，完成变量的保存工作，在进入主程序循环之前则完成变量的匹配工作。比如人体传感器的定义 属性定义 　　　       由于节点版本的差异，文中无法涉及到全部的定义节点历史版本，所有定义的属性均由节点自身presentation通告内容如下： TSF:MSG:READ,27-27-0,s=255,c=3,t=11,pt=0,l=14,sg=0:Relay Actuator TSF:MSG:READ,27-27-0,s=255,c=3,t=12,pt=0,l=3,sg=0:1 TSF:MSG:READ,27-27-0,s=81,c=0,t=3,pt=0,l=6,sg=0:Relay1 TSF:MSG:READ,27-27-0,s=23,c=0,t=24,pt=0,l=10,sg=0:Relay:Mode TSF:MSG:READ,27-27-0,s=255,c=3,t=26,pt=1,l=1,sg=0:2 TSF:MSG:SEND,0-0-27-27,s=255,c=3,t=27,pt=1,l=1,sg=0,ft=0,st=OK:1 GWT:RFC:C=1,MSG=27;255;3;0;6;M TSF:MSG:SEND,0-0-27-27,s=255,c=3,t=6,pt=0,l=1,sg=0,ft=0,st=OK:M TSF:MSG:READ,27-27-0,s=23,c=1,t=24,pt=0,l=3,sg=0:1:0 TSF:MSG:READ,27-27-0,s=81,c=1,t=2,pt=2,l=2,sg=0:1 TSF:MSG:READ,27-27-0,s=255,c=3,t=1,pt=0,l=0,sg=0: GWT:RFC:C=0,MSG=27;255;3;0;1;1565282381 TSF:MSG:SEND,0-0-27-27,s=255,c=3,t=1,pt=0,l=10,sg=0,ft=0,st=OK:1565282381 GWT:RFC:C=1,MSG=27;255;3;0;1;1565311181 TSF:MSG:SEND,0-0-27-27,s=255,c=3,t=1,pt=0,l=10,sg=0,ft=0,st=OK:1565311181 TSF:MSG:READ,27-27-0,s=23,c=0,t=24,pt=0,l=10,sg=0:Relay:Mode该条信息明确了自定义项目的内容即Relay:Mode TSF:MSG:READ,27-27-0,s=23,c=1,t=24,pt=0,l=3,sg=0:1:0该条信息明确了自定义项目的默认值即1:0 　　　       明白该节点通告内容后，我们对应生成我们自己想要的数据 {== Presentation 通告内容仅在节点初使化过程中出现，启动之后无外部指令无法重新通告，针对在线设备， 我们可以使用控制器刷新节点让其重新通告，针对离线设备则只能重启 ==} 变更属性 　　　       属性的变量需要用控制器完成操作，进入资源-传感器，查找对应的节点EUI ID值，找到对应的变量值： {>>操作时鼠标指向数量点击，请依据节点对应固件的自定义项填好数据，并回车键保存 Copyright © mysens.cn 2018 all right reserved，powered by Gitbook该文档修订时间： 2019-08-09 20:09:31 "},"ota/nodeid.html":{"url":"ota/nodeid.html","title":"变更ID","keywords":"","body":"title: node-id date: 2018-09-01T12:54:30.859Z tags: [mysensor-中文站] categories: [mysensor] 　　　       该功能目前已经包含在节点属性定义中，输出为EMPYT属性定义。现由于bootloader已经实现离线设备的更新及控制器分发数据，后期将取消定义EMPYT更换ID的功能，转移到本节中的使用控制器分发。 在线设备 　　　       进入设备节点列表，勾选对应的EUI ID，选择删除设备，设备将自动重启并请求网关控制器分配新的ID。 {>>请注意，分配新的ID，会导致原来设置的属性定义失效，需要重新设置 离线设备 　　　       进入设备节点列表，勾选对应的EUI ID，选择删除设备，进入Telnet界面后，我们可以看到如下： 309843421 GWT:RFC:C=1,MSG=30;255;3;0;18; 309843460 !TSF:MSG:SEND,0-0-30-30,s=255,c=3,t=18,pt=0,l=0,sg=0,ft=0,st=NACK: 　　　       对离线节点重启后，与控制器连接，即收到控制器要请求清空的消息，节点按流程处理更新ID Copyright © mysens.cn 2018 all right reserved，powered by Gitbook该文档修订时间： 2019-08-09 15:19:49 "}}